// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    healthMetrics HealthMetric[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model HealthMetric {
    id                         String   @id @default(cuid()) // ユニークID
    userId                     String   // ユーザーID (外部キー)
    date                       DateTime // JST の 00:00:00
    weight                     Float?   // 体重 (kg)
    weightStartTimeNanos       BigInt?  // 体重データのユニークキー
    systolic                   Float?   // 最高血圧
    diastolic                  Float?   // 最低血圧
    bloodPressureStartTimeNanos BigInt?  // 血圧データのユニークキー
    calories                   Float?   // カロリー (kcal)
    sodium                     Float?   // ナトリウム量 (mg)
    protein                    Float?   // タンパク質 (g)
    fat                        Float?   // 脂質 (g)
    nutritionStartTimeNanos    BigInt?  // 栄養データのユニークキー
    lastFetchedAt              DateTime @default(now()) // 最後にフェッチした日付 (メタデータ)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade) // ユーザーと関連付け

    // 複合一意キー: userId と date の組み合わせを一意にする
    @@unique([userId, date])

    // 体重・血圧・栄養データの StartTimeNanos を考慮した一意制約
    @@unique([userId, date, weightStartTimeNanos])
    @@unique([userId, date, bloodPressureStartTimeNanos])
    @@unique([userId, date, nutritionStartTimeNanos])
}